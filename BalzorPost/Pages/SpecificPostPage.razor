@page "/SpecificPostPage"
@using BalzorPost.Data
@using Domain
@using Domain.DTOs
@using HttpsClients.ClientInterfaces
@inject IPostService postService
@inject IJSRuntime JSRuntime

<h3>SpecificPostPage</h3>

            {
<div class="card">
    
    <p id="Titlepost">@thePost.Title</p>
    <p id="textpost">Posted by: @thePost.User.username</p>
    <p id="textpost">@thePost.Body</p>
    
    <div class="button-container">
        @if (UserInformation.getAuthLvl() > 0)
        {
            <input type="text" class="commentInput" placeholder="comment" @bind="commentText"/>
            <button class="nice-button" @onclick="() => Comment(thePost.Title)">Comment</button>
            <button class="nice-button" @onclick="() => Delete(thePost.Title)">Delete</button>
        }
    </div>
    <ul class="commentlist">
        @foreach (var c in thePost.comments)
        {
            <li class="commentListItem">
                User @c.username commented:
                <p id="textpost">@c.text</p>
            </li>

        }
    </ul>
</div>

@code {
    private Post thePost;
    private IEnumerable<Post> posts;
    private string commentText = "";
    
    //A method that runs when the page is initialized
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    private async Task Get()
    {
        try
        {
            posts = await postService.Get();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    private async Task Comment(string title)
    {
        try
        {
            await postService.CreateCommentAsync(new CommentDto(title, UserInformation.getUserName(), commentText));
            await JSRuntime.InvokeVoidAsync("location.reload");;

        }
        catch(Exception e)
        {
            Console.WriteLine(e);

        }
    }
    
    private async void Delete(string title){

        try
        {
            postService.DeletePostAsync(new DeletePostDto(title));
            await JSRuntime.InvokeVoidAsync("location.reload");;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}